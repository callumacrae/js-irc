var net = require('net');

function IRC(config, client)
{
	var __self = this;
	this.info = {};
	this.info.names = {};
	this.socket = new net.Socket();

	this.socket.on('data', function(data)
	{
		data = data.split('\r\n');
		for (var i = 0; i < data.length; i++)
		{
			if (data[i] !== '')
			{
				__self.handle(data[i]);
				client.send(data[i]);
			}
		}
	});

	this.socket.on('error', function(exception)
	{
		console.log('Error: ', exception);
	});

	this.socket.on('connect', function()
	{
		__self.on(/^PING :(.+)$/i, function(info)
		{
			__self.raw('PONG :' + info[1]);
		});
		__self.on(/^[^ ]+ 001 ([0-9a-zA-Z\[\]\\`_\^{|}\-]+) :.+ [^ !]+!([^ !@]+)@([^ @]+)$/, function(info)
		{
			__self.info.nick = info[1];
			__self.info.user = info[2];
			__self.info.host = info[3];
		});
		__self.on(/^:([^!]+)![^@]+@[^ ]+ NICK :(.+)$/, function(info)
		{
			if (info[1] === __self.info.nick)
			{
				__self.info.nick = info[2];
			}
		});
		__self.on(/^:([^!]+)!([^@]+)@([^ ]+) (JOIN|PRIVMSG) (#[^ ]+)/, function(info)
		{
			if (__self.info.names[info[5]] === undefined)
			{
				__self.info.names[info[5]] = [];
			}

			if (__self.info.names[info[5]][info[1]] === undefined)
			{
				__self.info.names[info[5]][info[1]] = {
					nick: info[1],
					user: info[2],
					host: info[3]
				}
			}
		});
		setTimeout(function()
		{
			__self.raw('NICK ' + config.nick);
			__self.raw('USER ' + config.user.username + ' 8 * :' + config.user.realname);
			/*__self.raw('PRIVMSG NickServ :IDENTIFY ' + config.user.pass);
			setTimeout(function()
			{
				for (var i = 0; i < config.chans.length; i++)
				{
					__self.join(config.chans[i]);
				}
			}, 2000);*/
		}, 1000);
	});

	this.socket.setEncoding('ascii');
	this.socket.setNoDelay();
	this.socket.connect(config.port, config.server);

	//handles incoming messages
	this.handle = function(data)
	{
		var i, info;
		for (i = 0; i < listeners.length; i++)
		{
			info = listeners[i][0].exec(data);
			if (info)
			{
				listeners[i][1](info, data);
				if (listeners[i][2])
				{
					listeners.splice(i, 1);
				}
			}
		}
	}

	this.raw = function(data)
	{
		__self.socket.write(data + '\n', 'ascii');
		var info = __self.info;
		client.send(':' + info.nick + '!' + info.user + '@' + info.host + ' ' + data);
	}

	listeners = [];
	this.on = function(data, callback)
	{
		listeners.push([data, callback, false])
	}
	this.on_once = function(data, callback)
	{
		listeners.push([data, callback, true]);
	}

	this.quit = function(msg)
	{
		__self.raw('QUIT :' + msg);
		__self.socket.end();
	}
}

module.exports = IRC;